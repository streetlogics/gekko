// 
// Low level datastore to persist 1m candles
// generated by the CandleManager to disk.
//
 
var zlib = require('zlib');
var fs = require('fs');
var lodash = require('lodash');
var async = require('async');
var _ = require('lodash');

var config = require('./util').getConfig();

var Store = function() {
  this.directory = config.history.directory;
 
  //TODO(yin): Make this mockable, or mock the fs in tests.
  // write a daily database
  this.write = async.compose(
    this.writeFile,
    this.deflate,
    this.toCSV
  );
 
  // read a daily database
  this.read = async.compose(
    this.toArray,
    this.unzip,
    this.readFile
  );
}
 
Store.prototype.toCSV = function(file, candles, next) {
  var csv = _.map(candles, function(properties) {
      return _.values(properties).join(',');
  }).join('\n');
 
  next(null, file, csv);
}
 
Store.prototype.deflate = function(file, csv, next) {
  zlib.deflate(csv, function(err, buffer) {
    if(err)
      throw 'Unable to deflate CSV';
 
    next(null, file, buffer);
  });
}
 
Store.prototype.writeFile = function(file, gzip, next) {
  fs.writeFile(this.directory + file, gzip, function(err) {
    if(err)
      throw 'Unable to write CSV';
 
    next();
  });
}
 
 
 
 
Store.prototype.readFile = function(file, next) {
  fs.readFile(this.directory + file, function(err, buffer) {
    if(err)
      throw 'Unable to read CSV';
 
    next(null, buffer);
  });
}
 
Store.prototype.unzip = function(buffer, next) {
  zlib.unzip(buffer, function(err, buffer) {
    if(err)
      throw 'Unable to unzip CSV';
 
    next(null, buffer.toString());
  });
}
 
Store.prototype.toArray = function(csv, next) {
  var f = parseFloat;
  var i = parseInt;
  var obj = _.map(csv.toString().split('\n'), function(l) {
    l = l.split(',');
    return {
      s: i(l[0]),
      o: f(l[1]),
      h: f(l[2]),
      l: f(l[3]),
      c: f(l[4]),
      p: f(l[5])
    }
  });
 
  next(obj);
}

module.exports = Store;
